{"version":3,"sources":["logo.svg","Data/Data.jsx","Card/Carta.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Data","titulo","imagen","texto","link","col1","backgroundColor","col2","Carta","props","color","map","cards","index","Card","style","Title","Body","Text","Link","href","Cartas","CardColumns","App","useState","count","setCount","Container","Row","Col","Jumbotron","className","Button","variant","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,4KCyB5BC,EAvBX,CACI,CACI,CACIC,OAAO,QACPC,OAAO,GACPC,MAAM,OACNC,KAAK,uDAET,CACIH,OAAO,QACPC,OAAO,GACPC,MAAM,SAGd,CACI,CACIF,OAAO,QACPC,OAAO,GACPC,MAAM,OACNC,KAAK,yDCjBfC,EAAO,CACTC,gBAAkB,OAEhBC,EAAO,CACTD,gBAAiB,QAEfE,EAAU,SAACC,GAYb,OAAOT,EAAKS,EAAMC,OAAOC,KAXX,SAACC,EAAMC,GACjB,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAyB,IAAhBN,EAAMC,MAAaL,EAAOE,GACrC,kBAACO,EAAA,EAAKE,MAAN,KAAaJ,EAAMX,QACnB,kBAACa,EAAA,EAAKG,KAAN,KACJ,kBAACH,EAAA,EAAKI,KAAN,KAAYN,EAAMT,OAC1B,kBAACW,EAAA,EAAKK,KAAN,CAAWC,KAAOR,EAAMR,MAAxB,sBAcWiB,MAPf,SAAiBZ,GACT,OACI,kBAACa,EAAA,EAAD,KACI,kBAAC,EAAD,CAAOZ,MAASD,EAAMC,U,cCKvBa,MArBf,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACRC,EADQ,KACDC,EADC,KAEb,OACM,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,CAAWC,UAAU,SACb,6CACpB,gKAOQ,kBAACC,EAAA,EAAD,CAAQC,QAAU,UAAUC,QAAW,kBAAOR,EAAS,EAAID,KAA3D,QACA,kBAAC,EAAD,CAAQf,MAASe,MCfTU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea3da2b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nconst Data =\n    [\n        [\n            { \n                titulo:\"carta\",\n                imagen:\"\",\n                texto:\"hola\",\n                link:\"https://react-bootstrap.github.io/components/cards/\"\n            },\n            { \n                titulo:\"carta\",\n                imagen:\"\",\n                texto:\"hola\",\n            },\n        ],\n        [\n            { \n                titulo:\"carta\",\n                imagen:\"\",\n                texto:\"hola\",\n                link:\"https://react-bootstrap.github.io/components/cards/\"\n            },\n        ]\n    ]\nexport default Data;\n\n\n","import Card from 'react-bootstrap/Card'\nimport React from 'react';\nimport CardColumns from 'react-bootstrap/CardColumns'\nimport Data from '../Data/Data'\nconst col1 = {\n    backgroundColor : \"red\"\n}\nconst col2 = {\n    backgroundColor: \"blue\"\n}\nconst Carta =   (props) => { \n    const Cons =  (cards,index)=>{\n        return(\n            <Card style = {props.color === 1? col1 : col2}>\n                <Card.Title>{cards.titulo}</Card.Title>\n                <Card.Body>\n            <Card.Text>{cards.texto}</Card.Text>\n    <Card.Link href= {cards.link}>Another Link</Card.Link>\n                </Card.Body>\n            </Card>\n        )\n    }\n    return Data[props.color].map(Cons)\n}\nfunction Cartas (props) { \n        return (\n            <CardColumns>\n                <Carta color = {props.color}/>\n            </CardColumns>\n        )\n}\nexport default Cartas;\n\n\n","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport  Jumbotron from 'react-bootstrap/Jumbotron'\nimport Cartas from './Card/Carta'\nimport Button from 'react-bootstrap/Button'\nimport\"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\nconst [count ,setCount] = useState(1);\n  return (\n        <Container>\n            <Row>\n                <Col>\n                <Jumbotron className=\"color\">\n                        <h1>Hello, world!</h1>\n    <p>\n        This is a simple hero unit, a simple jumbotron-style component for calling\n        extra attention to featured content or information.\n    </p>\n                </Jumbotron>\n                </Col>\n            </Row>\n            <Button variant = \"primary\" onClick = {() =>  setCount(1 - count)}>hola</Button>\n            <Cartas color = {count}/>\n        </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}